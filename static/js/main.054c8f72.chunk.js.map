{"version":3,"sources":["components/todo-form.tsx","components/todo-item.tsx","components/todo-list.tsx","index.tsx"],"names":["TodoForm","props","inputRef","React","formState","setFormState","className","ref","type","placeholder","onChange","event","target","value","handleInputChange","onKeyPress","key","newTodo","id","shortid","generate","text","isCompleted","handleTodoCreate","current","handleInputEnter","TodoItem","onClick","handleTodoComplete","todo","onBlur","handleTodoBlur","handleTodoUpdate","handleTodoRemove","TodoList","todos","map","TodoListApp","setTodos","newTodosState","push","find","filter","length","classList","add","remove","rootElement","document","getElementById","render"],"mappings":"uNAuDeA,EA/CE,SAACC,GAEhB,IAAMC,EAAWC,SAA+B,MAFH,EAKXA,WAAe,IALJ,mBAKtCC,EALsC,KAK3BC,EAL2B,KAkC7C,OACE,uBAAKC,UAAU,aACb,yBACEC,IAAKL,EACLM,KAAK,OACLC,YAAY,iBACZC,SAAU,SAACC,GAAD,OAhChB,SAA2BA,GAEzBN,EAAaM,EAAMC,OAAOC,OA8BDC,CAAkBH,IACvCI,WAAY,SAACJ,GAAD,OA3BlB,SAA0BA,GAExB,GAAkB,UAAdA,EAAMK,IAAiB,CAEzB,IAAMC,EAAyB,CAC7BC,GAAIC,IAAQC,WACZC,KAAMjB,EACNkB,aAAa,GAIfrB,EAAMsB,iBAAiBN,GAGnBf,GAAYA,EAASsB,UACvBtB,EAASsB,QAAQX,MAAQ,KAYFY,CAAiBd,QChBjCe,EA1BE,SAACzB,GAChB,OACE,uBAAKK,UAAU,aACb,uBAAKqB,QAAS,kBAAM1B,EAAM2B,mBAAmB3B,EAAM4B,KAAKX,MACrDjB,EAAM4B,KAAKP,YACV,wBAAMhB,UAAU,qBAAhB,UAEA,wBAAMA,UAAU,yBAIpB,uBAAKA,UAAU,2BACb,yBACEO,MAAOZ,EAAM4B,KAAKR,KAClBS,OAAQ7B,EAAM8B,eACdrB,SAAU,SAACC,GAAD,OAAgDV,EAAM+B,iBAAiBrB,EAAOV,EAAM4B,KAAKX,QAIvG,uBAAKZ,UAAU,cAAcqB,QAAS,kBAAM1B,EAAMgC,iBAAiBhC,EAAM4B,KAAKX,MAA9E,YCISgB,EApBE,SAACjC,GAChB,OACE,uBAAKK,UAAU,aACb,0BACGL,EAAMkC,MAAMC,KAAI,SAACP,GAAD,OACf,sBAAIb,IAAKa,EAAKX,IACZ,gBAAC,EAAD,CACEW,KAAMA,EACNG,iBAAkB/B,EAAM+B,iBACxBC,iBAAkBhC,EAAMgC,iBACxBL,mBAAoB3B,EAAM2B,mBAC1BG,eAAgB9B,EAAM8B,wBCL9BM,G,MAAc,WAAO,IAAD,EACElC,WAAgC,IADlC,mBACjBgC,EADiB,KACVG,EADU,KAmExB,OACE,uBAAKhC,UAAU,iBACb,gBAAC,EAAD,CAAU6B,MAAOA,EAAOZ,iBAjE5B,SAA0BM,GAExB,IAAMU,EAA8B,YAAOJ,GAG3CI,EAAcC,KAAKX,GAGnBS,EAASC,MA2DP,gBAAC,EAAD,CACEJ,MAAOA,EACPH,iBAzDN,SACErB,EACAO,GAGA,IAAMqB,EAA8B,YAAOJ,GAG3CI,EAAcE,MAAK,SAACZ,GAAD,OAAyBA,EAAKX,KAAOA,KAAKG,KAC3DV,EAAMC,OAAOC,MAGfyB,EAASC,IA8CLN,iBA1CN,SAA0Bf,GAExB,IAAMqB,EAAiCJ,EAAMO,QAC3C,SAACb,GAAD,OAAyBA,EAAKX,KAAOA,KAIvCoB,EAASC,IAoCLX,mBAhCN,SAA4BV,GAE1B,IAAMqB,EAA8B,YAAOJ,GAG3CI,EAAcE,MACZ,SAACZ,GAAD,OAAyBA,EAAKX,KAAOA,KACpCI,aAAeiB,EAAcE,MAC9B,SAACZ,GAAD,OAAyBA,EAAKX,KAAOA,KACpCI,YAGHgB,EAASC,IAqBLR,eAjBN,SAAwBpB,GACY,IAA9BA,EAAMC,OAAOC,MAAM8B,OACrBhC,EAAMC,OAAOgC,UAAUC,IAAI,oBAE3BlC,EAAMC,OAAOgC,UAAUE,OAAO,0BAmB9BC,EAAcC,SAASC,eAAe,QAC5CC,iBAAO,gBAAC,EAAD,MAAiBH,I","file":"static/js/main.054c8f72.chunk.js","sourcesContent":["// Import dependencies\nimport * as React from \"react\";\nimport shortid from \"shortid\";\n\n// Import interfaces\nimport { TodoInterface, TodoFormInterface } from \"./../interfaces\";\n\n// Todo form component\nconst TodoForm = (props: TodoFormInterface) => {\n  // Create ref for form input\n  const inputRef = React.useRef<HTMLInputElement>(null);\n\n  // Create new form state\n  const [formState, setFormState] = React.useState(\"\");\n\n  // Handle todo input change\n  function handleInputChange(event: React.ChangeEvent<HTMLInputElement>) {\n    // Update form state with the text from input\n    setFormState(event.target.value);\n  }\n\n  // Handle 'Enter' in todo input\n  function handleInputEnter(event: React.KeyboardEvent) {\n    // Check for 'Enter' key\n    if (event.key === \"Enter\") {\n      // Prepare new todo object\n      const newTodo: TodoInterface = {\n        id: shortid.generate(),\n        text: formState,\n        isCompleted: false,\n      };\n\n      // Create new todo item\n      props.handleTodoCreate(newTodo);\n\n      // Reset the input field\n      if (inputRef && inputRef.current) {\n        inputRef.current.value = \"\";\n      }\n    }\n  }\n\n  return (\n    <div className=\"todo-form\">\n      <input\n        ref={inputRef}\n        type=\"text\"\n        placeholder=\"Enter new todo\"\n        onChange={(event) => handleInputChange(event)}\n        onKeyPress={(event) => handleInputEnter(event)}\n      />\n    </div>\n  );\n};\n\nexport default TodoForm;\n","// Import dependencies\nimport * as React from 'react'\n\n// Import interfaces\nimport { TodoItemInterface } from './../interfaces'\n\n// TodoItem component\nconst TodoItem = (props: TodoItemInterface) => {\n  return (\n    <div className='todo-item'>\n      <div onClick={() => props.handleTodoComplete(props.todo.id)}>\n        {props.todo.isCompleted ? (\n          <span className=\"todo-item-checked\">&#x2714;</span>\n        ) : (\n          <span className=\"todo-item-unchecked\" />\n        )}\n      </div>\n\n      <div className=\"todo-item-input-wrapper\">\n        <input\n          value={props.todo.text}\n          onBlur={props.handleTodoBlur}\n          onChange={(event: React.ChangeEvent<HTMLInputElement>) => props.handleTodoUpdate(event, props.todo.id)}\n        />\n      </div>\n\n      <div className=\"item-remove\" onClick={() => props.handleTodoRemove(props.todo.id)}>\n        &#x02A2F;\n      </div>\n    </div>\n  )\n}\n\nexport default TodoItem\n","// Import dependencies\nimport * as React from 'react'\n\n// Import TodoItem\nimport TodoItem from './todo-item'\n\n// Import interfaces\nimport { TodoListInterface } from './../interfaces'\n\n// TodoList component\nconst TodoList = (props: TodoListInterface) => {\n  return (\n    <div className=\"todo-list\">\n      <ul>\n        {props.todos.map((todo) => (\n          <li key={todo.id}>\n            <TodoItem\n              todo={todo}\n              handleTodoUpdate={props.handleTodoUpdate}\n              handleTodoRemove={props.handleTodoRemove}\n              handleTodoComplete={props.handleTodoComplete}\n              handleTodoBlur={props.handleTodoBlur}\n            />\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n\nexport default TodoList\n","// Import dependencies\nimport * as React from \"react\";\nimport { render } from \"react-dom\";\n\n// Import components\nimport TodoForm from \"./components/todo-form\";\nimport TodoList from \"./components/todo-list\";\n// import Test from \"./components/Test\";\n\n// Import interfaces\nimport { TodoInterface } from \"./interfaces\";\n\n// Import styles\nimport \"./styles/styles.css\";\n\n// TodoListApp component\nconst TodoListApp = () => {\n  const [todos, setTodos] = React.useState<TodoInterface[]>([]);\n\n  // Creating new todo item\n  function handleTodoCreate(todo: TodoInterface) {\n    // Prepare new todos state\n    const newTodosState: TodoInterface[] = [...todos];\n\n    // Update new todos state\n    newTodosState.push(todo);\n\n    // Update todos state\n    setTodos(newTodosState);\n  }\n\n  // Update existing todo item\n  function handleTodoUpdate(\n    event: React.ChangeEvent<HTMLInputElement>,\n    id: string\n  ) {\n    // Prepare new todos state\n    const newTodosState: TodoInterface[] = [...todos];\n\n    // Find correct todo item to update\n    newTodosState.find((todo: TodoInterface) => todo.id === id)!.text =\n      event.target.value;\n\n    // Update todos state\n    setTodos(newTodosState);\n  }\n\n  // Remove existing todo item\n  function handleTodoRemove(id: string) {\n    // Prepare new todos state\n    const newTodosState: TodoInterface[] = todos.filter(\n      (todo: TodoInterface) => todo.id !== id\n    );\n\n    // Update todos state\n    setTodos(newTodosState);\n  }\n\n  // Check existing todo item as completed\n  function handleTodoComplete(id: string) {\n    // Copy current todos state\n    const newTodosState: TodoInterface[] = [...todos];\n\n    // Find the correct todo item and update its 'isCompleted' key\n    newTodosState.find(\n      (todo: TodoInterface) => todo.id === id\n    )!.isCompleted = !newTodosState.find(\n      (todo: TodoInterface) => todo.id === id\n    )!.isCompleted;\n\n    // Update todos state\n    setTodos(newTodosState);\n  }\n\n  // Check if todo item has title\n  function handleTodoBlur(event: React.ChangeEvent<HTMLInputElement>) {\n    if (event.target.value.length === 0) {\n      event.target.classList.add(\"todo-input-error\");\n    } else {\n      event.target.classList.remove(\"todo-input-error\");\n    }\n  }\n\n  return (\n    <div className=\"todo-list-app\">\n      <TodoForm todos={todos} handleTodoCreate={handleTodoCreate} />\n\n      <TodoList\n        todos={todos}\n        handleTodoUpdate={handleTodoUpdate}\n        handleTodoRemove={handleTodoRemove}\n        handleTodoComplete={handleTodoComplete}\n        handleTodoBlur={handleTodoBlur}\n      />\n    </div>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nrender(<TodoListApp />, rootElement);\n"],"sourceRoot":""}